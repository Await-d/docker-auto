name: PR Lint Check

on:
  pull_request:
    branches:
      - main
    paths:
      - '**.js'
      - '**.ts'
      - '**.tsx'
      - '**.vue'
      - '**.go'
      - 'package.json'
      - 'frontend/**'
      - 'backend/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'

      - name: Setup Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true
          cache-dependency-path: './backend/go.sum'

      - name: Get changed files
        id: changed-files
        run: |
          # Get changed files in this PR
          git fetch origin main
          changed_files=$(git diff --name-only origin/main...HEAD)
          echo "Changed files:"
          echo "$changed_files"

          # Filter for relevant files
          js_ts_files=$(echo "$changed_files" | grep -E '\.(js|ts|tsx|vue)$' || true)
          go_files=$(echo "$changed_files" | grep -E '\.go$' || true)

          echo "js_ts_files<<EOF" >> $GITHUB_OUTPUT
          echo "$js_ts_files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          echo "go_files<<EOF" >> $GITHUB_OUTPUT
          echo "$go_files" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Install frontend dependencies
        if: steps.changed-files.outputs.js_ts_files != ''
        run: |
          cd frontend
          npm ci

      - name: Run frontend linting
        if: steps.changed-files.outputs.js_ts_files != ''
        run: |
          cd frontend
          npm run lint:check 2>&1 | tee ../lint-results.txt || echo "Linting failed" >> ../lint-results.txt

      - name: Run Prettier check
        if: steps.changed-files.outputs.js_ts_files != ''
        run: |
          cd frontend
          npm run format:check 2>&1 | tee ../format-results.txt || echo "Formatting check failed" >> ../format-results.txt

      - name: Run Go linting
        if: steps.changed-files.outputs.go_files != ''
        run: |
          cd backend
          # Run go fmt check
          unformatted=$(gofmt -l . 2>&1 || true)
          if [ -n "$unformatted" ]; then
            echo "Go formatting issues found:" | tee ../go-format-results.txt
            echo "$unformatted" | tee -a ../go-format-results.txt
          else
            echo "Go formatting: OK" | tee ../go-format-results.txt
          fi

          # Run go vet
          go vet ./... 2>&1 | tee ../go-vet-results.txt || echo "Go vet issues found" >> ../go-vet-results.txt

      - name: Comment PR with results
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            let comment = '## 🔍 Code Quality Check Results\n\n';

            // Check frontend results
            if (fs.existsSync('lint-results.txt')) {
              const lintResults = fs.readFileSync('lint-results.txt', 'utf8');
              comment += '### 📝 ESLint Results\n```\n' + lintResults + '\n```\n\n';
            }

            if (fs.existsSync('format-results.txt')) {
              const formatResults = fs.readFileSync('format-results.txt', 'utf8');
              comment += '### 🎨 Prettier Results\n```\n' + formatResults + '\n```\n\n';
            }

            // Check backend results
            if (fs.existsSync('go-format-results.txt')) {
              const goFormatResults = fs.readFileSync('go-format-results.txt', 'utf8');
              comment += '### 🔧 Go Formatting Results\n```\n' + goFormatResults + '\n```\n\n';
            }

            if (fs.existsSync('go-vet-results.txt')) {
              const goVetResults = fs.readFileSync('go-vet-results.txt', 'utf8');
              comment += '### ⚡ Go Vet Results\n```\n' + goVetResults + '\n```\n\n';
            }

            if (comment === '## 🔍 Code Quality Check Results\n\n') {
              comment += '✅ All checks passed! No issues found.\n';
            }

            comment += '\n---\n*This comment was generated automatically by the PR Lint Check workflow.*';

            // Find existing comment and update or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Code Quality Check Results')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }