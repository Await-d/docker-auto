# Backend Development Dockerfile
# Multi-stage build for development with hot reload support

FROM golang:1.23-alpine AS base

# Install development dependencies
RUN apk add --no-cache \
    git \
    curl \
    bash \
    gcc \
    musl-dev \
    sqlite-dev \
    postgresql-client \
    tzdata

# Set timezone
ENV TZ=Asia/Shanghai

# Create app directory
WORKDIR /app

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download && go mod verify

# Install air for hot reload in development
RUN go install github.com/cosmtrek/air@latest

# Development stage
FROM base AS development

# Copy source code
COPY . .

# Create logs directory
RUN mkdir -p logs

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Default command for development (with hot reload)
CMD ["air", "-c", ".air.toml"]

# Production build stage
FROM base AS builder

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=1 GOOS=linux go build -a -installsuffix cgo -ldflags '-extldflags "-static"' -o main ./cmd/server

# Production stage
FROM alpine:latest AS production

RUN apk --no-cache add ca-certificates tzdata curl postgresql-client

WORKDIR /root/

# Copy the binary from builder
COPY --from=builder /app/main .
COPY --from=builder /app/configs ./configs
COPY --from=builder /app/database ./database

# Create logs directory
RUN mkdir -p logs

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:8080/health || exit 1

# Run the binary
CMD ["./main"]